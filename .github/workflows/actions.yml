name: check, build, test
on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-18.04
    outputs:
      sc-version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: lint class library
        run: |
          sudo npm install -g lintspaces-cli
          lintspaces -e .editorconfig SCClassLibrary/**/*.sc || true # ignore failure
      - name: lint cpp files
        run: |
          echo "Running tools/clang-format.py lintall"
          tools/clang-format.py -c clang-format-8 -d clang-format-diff-8 lintall || exit 1
          echo "Lint successful"
      - name: set version string for artifacts
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            FULL_TAG=${GITHUB_REF#refs/tags/}
            SC_VERSION=${FULL_TAG##Version-}
          else
            SC_VERSION=$GITHUB_SHA
          fi
          echo "::set-output name=version::$SC_VERSION"

  Linux:
    needs: lint
    runs-on: ubuntu-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name: 'xenial gcc5'
            os-version: '16.04'
            c-compiler: 'gcc-5'
            cxx-compiler: 'g++-5'
            use-syslibs: false
            shared-libscsynth: false
            qt-version: '5.9.3' # manually install requested version of qt
            # artifact-suffix: 'linux-bionic-gcc9' # set if needed - will trigger artifact upload

          - job-name: 'bionic gcc7'
            os-version: '18.04'
            c-compiler: 'gcc-7'
            cxx-compiler: 'g++-7'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic gcc8'
            os-version: '18.04'
            c-compiler: 'gcc-8'
            cxx-compiler: 'g++-8'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic gcc9'
            os-version: '18.04'
            c-compiler: 'gcc-9'
            cxx-compiler: 'g++-9'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic gcc9 shared libscsynth'
            os-version: '18.04'
            c-compiler: 'gcc-9'
            cxx-compiler: 'g++-9'
            use-syslibs: false
            shared-libscsynth: true

          - job-name: 'bionic gcc10'
            os-version: '18.04'
            c-compiler: 'gcc-10'
            cxx-compiler: 'g++-10'
            use-syslibs: false
            shared-libscsynth: false
            artifact-suffix: 'linux-bionic-gcc10' # set if needed - will trigger artifact upload

          # - job-name: 'focal gcc10 use system libraries' # disabled - boost version incompatible
          #   os-version: '20.04'
          #   c-compiler: 'gcc-10'
          #   cxx-compiler: 'g++-10'
          #   use-syslibs: true
          #   shared-libscsynth: false

          - job-name: 'bionic clang6.0'
            os-version: '18.04'
            c-compiler: 'clang-6.0'
            cxx-compiler: 'clang++-6.0'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic clang8'
            os-version: '18.04'
            c-compiler: 'clang-8'
            cxx-compiler: 'clang++-8'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic clang9'
            os-version: '18.04'
            c-compiler: 'clang-9'
            cxx-compiler: 'clang++-9'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'focal clang10'
            os-version: '20.04'
            c-compiler: 'clang-10'
            cxx-compiler: 'clang++-10'
            use-syslibs: false
            shared-libscsynth: false

    name: Linux ${{ matrix.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      CC: ${{ matrix.c-compiler }}
      CXX: ${{ matrix.cxx-compiler }}
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}.zip'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: prepare daily timestamp for cache
        id: current-date
        run: echo "::set-output name=stamp::$(date '+%Y-%m-%d')"
      - name: cache ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-
      - name: cache qt
        id: cache-qt
        uses: actions/cache@v1
        if: matrix.qt-version
        with:
          path: ../Qt
          key: ${{ runner.os }}-v1-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-qt${{ matrix.qt-version }}
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes build-essential cmake pkg-config libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline6-dev libfftw3-dev libicu-dev libxt-dev libudev-dev emacs ccache
      - name: install system libraries
        if: env.USE_SYSLIBS == 'true'
        run: sudo apt-get install --yes libboost-thread-dev libboost-system-dev libboost-filesystem-dev libboost-regex-dev libboost-test-dev libboost-program-options-dev libyaml-cpp-dev
      - name: install qt from apt
        if: '!matrix.qt-version'
        run: sudo apt-get install qt5-default qt5-qmake qttools5-dev qttools5-dev-tools qtdeclarative5-dev libqt5svg5-dev libqt5websockets5-dev qtwebengine5-dev
      - name: install qt using aqtinstall
        uses: jurplel/install-qt-action@v2
        if: matrix.qt-version
        with:
          modules: qtwebengine
          version: ${{ matrix.qt-version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          cmake $EXTRA_CMAKE_FLAGS -DSC_EL=ON -DSC_VIM=ON -DSC_ED=ON -DSC_QT=ON -DSC_IDE=ON  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PATH -DCMAKE_BUILD_TYPE=Release .. # --debug-output
      - name: build
        run: |
          cd $BUILD_PATH
          make install -j2
      - name: create archive
        if: matrix.artifact-suffix
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE .
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
          retention-days: 7 # quickly remove test artifacts

  macOS:
    needs: lint
    runs-on: macos-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - job-name: ''
            os-version: '10.15'
            xcode-version: '11.7'
            use-syslibs: false
            shared-libscsynth: false
            artifact-suffix: 'macOS' # set if needed - will trigger artifact upload

          # - job-name: 'legacy'
          #   os-version: '10.15'
          #   xcode-version: '10.3'
          #   qt-version: '5.9' # will use qt not from homebrew
          #   use-syslibs: false
          #   shared-libscsynth: false
          #   artifact-suffix: 'macOS-legacy' # set if needed - will trigger artifact upload

          - job-name: 'use system libraries'
            os-version: '10.15'
            xcode-version: '11.7'
            use-syslibs: true
            shared-libscsynth: false

          - job-name: 'shared libscsynth'
            os-version: '10.15'
            xcode-version: '11.7'
            use-syslibs: false
            shared-libscsynth: true

    name: macOS ${{ matrix.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}.zip'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: prepare timestamp for cache
        id: current-date
        run: |
          echo "::set-output name=stamp::$(date '+%Y-%m-%d')"
          echo "::set-output name=week::$(date '+%V')"
      - name: cache ccache
        uses: actions/cache@v2
        with:
          path: ~/Library/Caches/ccache
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-
      - name: cache homebrew downloads
        uses: actions/cache@v2
        id: cache-homebrew
        with:
          path: ~/Library/Caches/Homebrew/downloads
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-homebrew-${{ steps.current-date.outputs.week }}
      - name: cache qt
        id: cache-qt
        uses: actions/cache@v1
        if: matrix.qt-version
        with:
          path: ../Qt
          key: ${{ runner.os }}-v1-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-qt${{ matrix.qt-version }}
      - name: install qt using aqtinstall
        uses: jurplel/install-qt-action@v2
        if: matrix.qt-version
        with:
          modules: 'qtwebengine'
          version: ${{ matrix.qt-version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: cleanup homebrew downloads # make sure we store only relevant downloads in cache
        if: '!steps.cache-homebrew.outputs.cache-hit'
        run: rm -rf $(brew --cache)
      - name: install dependencies
        run: |
          brew install libsndfile portaudio ccache fftw
          # add ccamke to PATH - see https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
      - name: install system libraries
        if: env.USE_SYSLIBS == 'true'
        run: brew install yaml-cpp boost
      - name: install qt from homebrew
        if: '!matrix.qt-version'
        run: brew install qt

      - name: configure
        env:
          DEVELOPER_DIR: '/Applications/Xcode_${{ matrix.xcode-version }}.app/Contents/Developer'
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON $EXTRA_CMAKE_FLAGS"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          if [[ -z "${{ matrix.qt-version }}" ]]; then EXTRA_CMAKE_FLAGS="-DCMAKE_PREFIX_PATH=`brew --prefix qt5` $EXTRA_CMAKE_FLAGS"; fi

          echo "EXTRA_CMAKE_FLAGS:" $EXTRA_CMAKE_FLAGS

          cmake -G"Xcode" -DRULE_LAUNCH_COMPILE=ccache -DCMAKE_OSX_DEPLOYMENT_TARGET=10.10 -DSUPERNOVA=ON $EXTRA_CMAKE_FLAGS .. --debug-output
      - name: build
        run: cmake --build $BUILD_PATH --config Release --target install
      - name: create archive
        if: matrix.artifact-suffix
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE SuperCollider # this assumes that we end up with the build in the folder SuperCollider
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
          retention-days: 7 # quickly remove test artifacts

  test:
    strategy:
      fail-fast: false
      matrix:
        include:

          - name: macOS
            runs-on: macos-10.15
            sclang: 'build/Install/SuperCollider/SuperCollider.app/Contents/MacOS/sclang'
            artifact-suffix: macOS

          - name: Linux
            runs-on: ubuntu-18.04
            sclang: 'build/Install/bin/sclang'
            artifact-suffix: linux-bionic-gcc10

    needs: [lint, Linux, macOS] # unfortunately we can't use matrix expression here to make Linux test depend only on Linux build
    runs-on: '${{ matrix.runs-on }}'
    name: 'test on ${{ matrix.name }}'
    env:
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}.zip'
      QUARKS_PATH: ${{ github.workspace }}/build/Quarks
      TESTS_PATH: ${{ github.workspace }}/testsuite/classlibrary
      SCLANG: ${{ github.workspace }}/${{ matrix.sclang }}
      SCRIPT_PROTO: ${{ github.workspace }}/testsuite/scripts/gha_test_run_proto.json
      SCRIPT_RUN: ${{ github.workspace }}/testsuite/scripts/run/gha_test_run.json
      QPM_URL: git+https://github.com/supercollider/qpm.git@topic/xvfb-off
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false # don't need submodules for testing
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}
      - name: extract artifact
        run: |
          cd $INSTALL_PATH
          echo `pwd`
          echo `ls -s`
          unzip $ARTIFACT_FILE
      - name: setup Linux environment
        if: runner.os == 'Linux'
        run: |
          # install dependencies
          sudo apt-get update
          sudo apt-get install --yes libsndfile1 libavahi-client-dev libfftw3-dev libicu-dev libudev-dev qt5-default qtwebengine5-dev jackd1

          # add bin to PATH so qpm can find scsynth
          echo "$INSTALL_PATH/bin" >> $GITHUB_PATH

          # start jack
          jackd --no-realtime -d dummy &
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '2.x'
      - name: prepare tests
        run: |
          echo `python --version` # check version
          sudo pip install $QPM_URL

          # install API quark
          mkdir $QUARKS_PATH && cd $QUARKS_PATH
          git clone --depth=1 https://github.com/supercollider-quarks/API

          # make working copy of the script
          cp $SCRIPT_PROTO $SCRIPT_RUN
      - name: run tests on Linux
        if: runner.os == 'Linux'
        env:
          PYCHARM_HOSTED: 1 # enable color output
          QPM_DEBUG: 1
          QT_PLATFORM_PLUGIN: 'offscreen'
        run: xvfb-run --server-args="-screen 0, 1280x720x24" -a qpm test.run -l $SCRIPT_RUN --path $SCLANG --include $QUARKS_PATH $TESTS_PATH
      - name: run tests on macOS
        if: runner.os == 'macOS'
        env:
          PYCHARM_HOSTED: 1 # enable color output
          QPM_DEBUG: 1
        run: qpm test.run -l $SCRIPT_RUN --path $SCLANG --include $QUARKS_PATH $TESTS_PATH
        
  deploy:
    strategy:
      fail-fast: false
      matrix:
        include:

          - artifact-suffix: macOS
            upload-to-github: true
            upload-to-s3: true
            s3-os-name: osx
            s3-artifact-suffx: ''
            s3-create-latest-link: true # create link to pointing to the "latest" build; activate only one per branch per s3-os-name

    if: github.repository_owner == 'supercollider' || startsWith(github.ref, 'refs/tags/') # run in the main repo and everywhere on tagged commits
    needs: [lint, macOS]
    runs-on: ubuntu-18.04
    name: 'deploy ${{ matrix.artifact-suffix }} build'
    env:
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}.zip'
      UPLOAD_TO_GH_RELEASE: ${{ matrix.upload-to-github && startsWith(github.ref, 'refs/tags/') }}
      UPLOAD_TO_S3: ${{ matrix.upload-to-s3 && (secrets.S3_ACCESS_KEY_ID != 0) && !startsWith(github.ref, 'refs/tags/') }}
      S3_CREATE_LATEST_LINK: ${{ matrix.s3-create-latest-link && matrix.upload-to-s3 && (secrets.S3_ACCESS_KEY_ID != 0) && startsWith(github.ref, 'refs/heads/') }}
      S3_ARTIFACT_PATH: ${{ github.workspace }}/build/s3-upload
      S3_ARTIFACT_NAME: SC-${{ github.sha }}${{ matrix.s3-artifact-suffx }}.zip
      S3_BUILD_LOCATION: builds/supercollider/supercollider/${{ matrix.s3-os-name }}
      S3_ROOT_URL: 'https://supercollider.s3.amazonaws.com'
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}
      - name: upload to the release page
        uses: softprops/action-gh-release@v1
        if: env.UPLOAD_TO_GH_RELEASE == 'true'
        with:
          files: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: preapre s3 upload
        if: env.UPLOAD_TO_S3 == 'true'
        run: |
          mkdir $S3_ARTIFACT_PATH
          cp $INSTALL_PATH/$ARTIFACT_FILE $S3_ARTIFACT_PATH/$S3_ARTIFACT_NAME
          
          # set S3_BUILD_LOCATION 
          echo 'S3_BUILD_URL<<EOF' >> $GITHUB_ENV
          echo ${{ env.S3_ROOT_URL }}/${{ env.S3_BUILD_LOCATION }}/${{ env.S3_ARTIFACT_NAME }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
          if [[ $S3_CREATE_LATEST_LINK == true ]]; then
            # set LATEST_HTML_PATH and LATEST_HTML_URL
            echo 'LATEST_HTML_PATH<<EOF' >> $GITHUB_ENV
            echo ${{ env.S3_ARTIFACT_PATH }}/${GITHUB_REF#refs/heads/}-latest.html >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            echo 'LATEST_HTML_URL<<EOF' >> $GITHUB_ENV
            echo ${{ env.S3_ROOT_URL }}/${{ env.S3_BUILD_LOCATION }}/${GITHUB_REF#refs/heads/}-latest.html >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
          fi
      - name: create latest link
        if: env.S3_CREATE_LATEST_LINK == 'true'
        env:
          FWD_HTML: '<html><head><meta http-equiv="refresh" content="0; url=''${{ env.S3_BUILD_URL }}''" /></head></html>'
        run: |
          mkdir -p "${LATEST_HTML_PATH%/*}"
          echo writing $FWD_HTML to $LATEST_HTML_PATH
          echo $FWD_HTML > $LATEST_HTML_PATH
          echo html file contents:
          cat $LATEST_HTML_PATH
      - name: upload to S3
        uses: jakejarvis/s3-sync-action@master
        if: env.UPLOAD_TO_S3 == 'true'
        with:
          args: --acl public-read
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET: supercollider
          AWS_S3_ENDPOINT: https://s3-us-west-2.amazonaws.com
          AWS_REGION: 'us-west-2'
          SOURCE_DIR: ${{ env.S3_ARTIFACT_PATH }}
          DEST_DIR: ${{ env.S3_BUILD_LOCATION }}
      - name: post S3 build location
        if: env.UPLOAD_TO_S3 == 'true'
        run: |
          echo "::group::S3 build location"
          echo $S3_BUILD_URL
          if [[ -n "$LATEST_HTML_URL" ]]; then echo $LATEST_HTML_URL; fi
          echo "::endgroup::"
